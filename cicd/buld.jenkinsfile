pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'cr.yandex/crppq9qttclm6v54ocop'
        FRONTEND_DIR = 'frontend' // Путь к проекту фронтенда
        CLUSTER_NAME = 'tim-cluster'
        PUBLISH_OUTPUT_DIR = 'publish' // Папка для опубликованных файлов
        DOCKER_IMAGE_FRONTEND = "${DOCKER_REGISTRY}/backend-app:${GIT_COMMIT[0..5]}-${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    echo 'Сборка фронтенда...'
                    dir(FRONTEND_DIR) {
                        sh 'dotnet restore'
                        sh 'dotnet build --configuration Release'
                    }
                }
            }
        }


        stage('Publish Frontend') {
            steps {
                script {
                    echo 'Публикация фронтенда...'
                    dir(FRONTEND_DIR) {
                        sh "dotnet publish --configuration Release --output ${PUBLISH_OUTPUT_DIR}/frontend"
                    }
                }
            }
        }


        stage('Build Docker Images') {
            steps {
                script {
                    echo 'Сборка Docker-образов...'
                    dir(BACKEND_DIR) {
                        sh """
                            docker build -t ${DOCKER_IMAGE_FRONTEND} .
                        """
                    }
                }
            }
        }

         stage('login Yandex Container Registry') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'yandex-cloud-sa-key', variable: 'SA_KEY_FILE')]) {
                    sh """
                        ~/yandex-cloud/bin/yc config set service-account-key ${SA_KEY_FILE}
                    """
                    }
                    sh """
                        ~/yandex-cloud/bin/yc managed-kubernetes cluster get-credentials ${CLUSTER_NAME} --external --force
                    """
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    echo 'Публикация Docker-образов в реестр...'
                     sh "sudo docker push ${DOCKER_IMAGE_FRONTEND}"
                }
            }
    
        }
    }
    post {
        success {
                  sh "sudo docker rmi  ${DOCKER_IMAGE_FRONTEND}"
            echo 'Build and deploy completed successfully!'
        }
        failure {
            // Действия в случае ошибки
            echo 'Build or deploy failed!'
        }
    }
}